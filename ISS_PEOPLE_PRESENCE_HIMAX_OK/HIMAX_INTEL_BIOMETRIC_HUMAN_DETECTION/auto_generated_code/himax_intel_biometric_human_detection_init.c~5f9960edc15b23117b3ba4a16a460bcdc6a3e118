/*************************************************************************************************
 * IMPORTANT NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT THIS FILE.
 * Any edits to this file may be overwritten or cause unexpected behavior
 * **********************************************************************************************/


#include "himax_intel_biometric_human_detection_internal.h"


/*************************************************************************************************
 * himax_intel_biometric_human_detection_get_descriptor callback
 * **********************************************************************************************/
static void himax_intel_biometric_human_detection_get_descriptor(IN algo_context *context,
				       IN void *private_data,
				       INOUT sc_sensor_descriptor *descriptor)
{
	bool is_absolute_sensitivity;
	int8_t unit_exponent;
	uint16_t descriptor_flags;

	HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEBUG("get_descriptor\n");

	/* Initialize the descriptor */
	descriptor_flags = SC_DESC_FLAG_HID_CUSTOM_SENSOR;

	sensor_descriptor_init(descriptor, SC_SENSOR_TYPE_INTEL_BIOMETRIC_HUMAN_DETECTION, descriptor_flags);

	/* Add configuration items */
		unit_exponent = 0;
	is_absolute_sensitivity = false;
	sensor_descriptor_add_sensitivity_item_uint32(descriptor,
			SC_USAGE_SENSOR_DATA_HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DISTANCE, unit_exponent, true);

	/* Add data items */
		unit_exponent = 0;
	sensor_descriptor_add_data_item_uint32(descriptor,
			SC_USAGE_SENSOR_DATA_HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DISTANCE, unit_exponent);
	unit_exponent = 0;
	sensor_descriptor_add_data_item_uint8(descriptor,
			SC_USAGE_SENSOR_DATA_HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_PRESENCE_CONFIDENCE, unit_exponent);
	unit_exponent = 0;
	sensor_descriptor_add_data_item_uint8(descriptor,
			SC_USAGE_SENSOR_DATA_HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_PRESENCE, unit_exponent);

}

void himax_intel_biometric_human_detection_add_reporters(IN algo_context *context,
			       IN sc_sdt_sensor_data *sdt)
{
	sc_sensor_luid luid = {0};
	algo_luid_mask luid_mask = 0;
	algo_reporter_config_flags auto_config_flags = 0;
	sc_status res;
		algo_auto_config_properties auto_config_properties = {0};
	/*Reporter No. 1*/
	luid = (sc_sensor_luid)
	{
		.sensor_type = 32769,
		.instance_id = 0,
		.luid_flags = SC_LUID_FLAG_NONE,
	};

	luid_mask = (ALGO_LUID_MASK_SENSOR_TYPE | ALGO_LUID_MASK_INSTANCE_ID);
	auto_config_flags = (ALGO_REPORTER_CONFIG_MANDATORY | ALGO_REPORTER_CONFIG_AUTO_CONFIG);
	auto_config_properties = (algo_auto_config_properties)
	{
		.min_report_interval = MS_TO_SC_TIMESTAMP(10),
		.max_report_interval = MS_TO_SC_TIMESTAMP(10),
		.sensitivity = 0,
	};
	res = algo_add_reporter(context, HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_HIMAX_ALGO_INDEX, &luid,
			luid_mask, auto_config_flags, &auto_config_properties);
	DBG_ASSERT(res == SC_STATUS_SUCCESS);

	HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEBUG("passed algo_add_reporter, res=%d\n", (int)res);
}

void himax_intel_biometric_human_detection_create(INOUT algo_context **context,
			INOUT void **private_context,
			IN sc_sdt_sensor_data *sdt,
			IN uint16_t context_size)
{
	sc_status res;

	/* Register the sensor basic (mandatory) callback functions */
	algo_basic_callback_func basic_callback_funcs = {
		.get_descriptor = &himax_intel_biometric_human_detection_get_descriptor,
		.process_data = &himax_intel_biometric_human_detection_process_data,
		.sensitivity_test = &himax_intel_biometric_human_detection_sensitivity_test,
		.clear_context = &himax_intel_biometric_human_detection_clear_context,
	};

	/* Create the context */
	res = algo_create_context(context_size, HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_NUM_REPORTERS,
				  context, private_context);

	if ((res != SC_STATUS_SUCCESS) || (*context == NULL)) {
		HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_ERROR("create_context failed\n");
		return;
	}
	HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEBUG("passed algo_create_context\n");

	himax_intel_biometric_human_detection_add_reporters(*context, sdt);
	
	/* Register the sensor advance (optional) callback functions*/
	algo_register_notify_event_callback(*context, &himax_intel_biometric_human_detection_notify_event);
	algo_register_ioctl_callback(*context, &himax_intel_biometric_human_detection_ioctl);
	algo_register_get_config_callback(*context, &himax_intel_biometric_human_detection_get_config);
	algo_register_set_config_callback(*context, &himax_intel_biometric_human_detection_set_config);

	/* Creating the sensor when the parsing completed successfully */
	res = algo_create_sensor(*context, sdt, &basic_callback_funcs,	0, 0);

	if (res != SC_STATUS_SUCCESS) {
		HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_ERROR("create_sensor failed\n");
	} else {
		HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEBUG("passed algo_create_sensor, res=%d\n", (int)res);
	}
}


/************************************************************************************************/

#include "ish_sections.h"
__sensor_metadata_section__(HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_metadata_entry) = ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
"<Sensor BuildNumber=\"0.0.0.1\" CustomFlag=\"Yes\" Flags=\"128\" FriendlyName=\"HIMAX_v Sensor\" ISSVersion=\""TOSTRING(VER_MAJOR)"."TOSTRING(VER_MINOR)"\" InitFunctionName=\"HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_init\" ModelId=\"258\" ModelName=\"\" NotExposedFlag=\"Define in PDT\" ObjectType=\"Virtual\" PluginVersion=\"1.0.0.201902180738\" SensorCoreAPIVersion=\"1.0.0\" SensorName=\"HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION\" SensorTypeId=\"550\" VendorId=\"258\">"
"    <SensorAttributes>"
"        <IsEventDriven>false</IsEventDriven>"
"        <IsStateDriven>false</IsStateDriven>"
"        <IsWakeFromCS>false</IsWakeFromCS>"
"        <IsAlwaysOn>false</IsAlwaysOn>"
"        <IsOverrideStrings>false</IsOverrideStrings>"
"    </SensorAttributes>"
"    <SystemEvents>"
"        <IsWorkItemResult>false</IsWorkItemResult>"
"        <IsTimerExpired>false</IsTimerExpired>"
"    </SystemEvents>"
"    <Fields>"
"        <UserDefined>false</UserDefined>"
"        <Field Exponent=\"0\" FieldId=\"CUSTOM_VALUE_1\" FieldName=\"distance\" FieldType=\"5\" IsAbsoluteSensitivity=\"false\" Sensitive=\"true\" SensitivityExponent=\"0\" SensitivityType=\"3\" Unit=\"NOT_SPECIFIED\"/>"
"        <Field Exponent=\"0\" FieldId=\"CUSTOM_VALUE_2\" FieldName=\"presence_confidence\" FieldType=\"3\" Sensitive=\"false\" Unit=\"NOT_SPECIFIED\"/>"
"        <Field Exponent=\"0\" FieldId=\"CUSTOM_VALUE_3\" FieldName=\"presence\" FieldType=\"3\" Sensitive=\"false\" Unit=\"NOT_SPECIFIED\"/>"
"    </Fields>"
"    <Callbacks>"
"        <Callback>notify_event</Callback>"
"        <Callback>ioctl</Callback>"
"        <Callback>get_config</Callback>"
"        <Callback>set_config</Callback>"
"    </Callbacks>"
"    <Dependencies>"
"        <Dependency Configuration=\"0\" DependencyType=\"0\" FriendlyName=\"HIMAX Sensor\" InstanceId=\"0\" Name=\"HIMAX_ALGO\" ReportIntervalMax=\"10\" ReportIntervalMin=\"10\" Sensitivity=\"0\" SensorTypeId=\"32769\"/>"
"    </Dependencies>"
"</Sensor>"
"";
