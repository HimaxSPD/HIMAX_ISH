/*************************************************************************************************
 * IMPORTANT NOTE: THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT THIS FILE.
 * Any edits to this file may be overwritten or cause unexpected behavior
 * **********************************************************************************************/


#ifndef HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEFS_H
#define HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEFS_H

#include "sc_algo_api.h"
#include "himax_intel_biometric_human_detection.h"

/**************************************************************************************************
 * Global definitions
 * ***********************************************************************************************/

#define HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_HIMAX_ALGO_INDEX 0
#define HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_NUM_REPORTERS 1



/**************************************************************************************************
 * Forward declaration
 * ***********************************************************************************************/

/* Initialization function */
void himax_intel_biometric_human_detection_create(INOUT algo_context **context,
			INOUT void **private_context,
			IN sc_sdt_sensor_data *sdt,
			IN uint16_t context_size);
/* The function clears the internal context of the algo sensor, leading to an initialized state.
 * This function is called when the sensor is restarted.
 * This function should not initialize constant values that are not changed along the running.
 * For example - SDT calibration data should not be cleared and reloaded again in this flow. */
void himax_intel_biometric_human_detection_clear_context(IN algo_context *context,
			       INOUT void *private_data);

/* The function is called when one or more of the reporters has new data for processing. */
sc_status himax_intel_biometric_human_detection_process_data(IN algo_context *context,
				   INOUT void *private_data,
				   IN uint8_t samples_num,
				   IN reporter_sample_info *samples);

/*
 * The function gets two data samples (current and previous),
 * the desired sensitivity usage and value, and calculates whether the sensitivity threshold
 * was passed for the given samples.
 * If the function is not supported, the sensitivity threshold is set to 0 by default and the
 * new sample is sent to the sensor according to the report interval. */
void himax_intel_biometric_human_detection_sensitivity_test(IN algo_context *context,
				  IN void *private_data,
				  IN sc_sensitivity_test_input *input,
				  OUT sc_sensitivity_test_output *output);

sc_status himax_intel_biometric_human_detection_notify_event(INOUT algo_context *context,
			INOUT void *private_data,
			IN sc_event_notification_event_id event_id,
			IN sc_event_info event_info);

sc_status himax_intel_biometric_human_detection_ioctl(IN algo_context *context,
			IN sc_ioctl_id ioctl_id,
			IN uint16_t input_buffer_length,
			INOUT uint16_t *output_buffer_length,
			IN uint8_t *input_buf,
			OUT uint8_t *output_buf);

sc_status himax_intel_biometric_human_detection_get_config(IN algo_context *context,
			IN void *private_data,
			INOUT sc_sensor_item_value *item_value);

sc_status himax_intel_biometric_human_detection_set_config(IN algo_context *context,
			INOUT void *private_data,
			INOUT sc_sensor_item_value *item_value);



#endif /* HIMAX_INTEL_BIOMETRIC_HUMAN_DETECTION_DEFS_H */

